# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  lint:
    docker:
      - image: cimg/python:3.10.1
    steps:
      - checkout
      - restore_cache: # **restores saved dependency cache if the Branch key template or requirements.txt files have not changed since the previous run**
          key: &deps1-cache deps1-{{ .Branch }}-{{ checksum "requirements.txt" }} 
      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            source venv/bin/activate
            pip install -r requirements.txt
      - save_cache: # ** special step to save dependency cache **
          key: *deps1-cache
          paths:
            - "venv"
      - run:
          name: lint
          command: ./venv/bin/python3 -m pylint map-app/
  test:
    docker:
      - image: cimg/python:3.10.1
    parallelism: 2
    steps:
      - checkout
      - run:
          name: install dependencies
          command: pip install pytest
      - run:
          name: Run tests
          command: |
            set -e
            TEST_FILES=$(circleci tests glob "test-app/*.py" | circleci tests split --split-by=filesize)
            mkdir -p test-results
            pytest --verbose --junitxml=test-results/junit.xml $TEST_FILES
      - store_test_results:
          path: test-results
      - store_artifacts:
          path: test-results
          
  say-hello:
    # Specify the execution environment. You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # See: https://circleci.com/docs/2.0/configuration-reference/#docker-machine-macos-windows-executor
    docker:
      - image: cimg/base:stable
    # Add steps to the job
    # See: https://circleci.com/docs/2.0/configuration-reference/#steps
    steps:
      - checkout
      - run:
          name: "Say hello"
          command: "echo Hello, World!"
  deploy:
    machine: true
    # docker:
    #   - image: arvindr226/alpine-ssh
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "ec:d4:6f:89:b6:5d:2b:92:af:74:44:21:19:1a:9a:cd"
      # - run:
      #     name: Fix ssh Could not resolve hostname
      #     command: |
      #       ssh-keyscan $SSH_HOST >> ~/.ssh/known_hosts # Add live server IP to known hosts.
      - run:
           name: Test deploy 
           command: |
               ls ~/.ssh
               cat ~/.ssh/config
               #ssh -oStrictHostKeyChecking=no -v  $SSH_USER@$SSH_HOST 'ls'
               ssh $SSH_USER@$SSH_HOST 'cd /home/sammy/test_circleci && ./deploy.sh dev'  
          
# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  python-workflow:
    jobs:
      - lint
      # - test
      - deploy
  deploy-workflow:
    when:
        or:
          - equal: [main, << pipeline.git.branch >>]
    jobs:
      - say-hello

  